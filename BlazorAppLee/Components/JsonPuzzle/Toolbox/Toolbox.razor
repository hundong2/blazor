@using BlazorAppLee.Models.JsonPuzzle

<div class="toolbox">
    <div class="toolbox-header">
        <h5>Puzzle Pieces</h5>
    </div>
    
    <div class="toolbox-content">
        <div class="tool-category">
            <h6>Containers</h6>
            <div class="tool-item object-tool" @onclick="() => OnPieceClick(PuzzleType.Object)">
                <div class="puzzle-preview object-preview">
                    <span>{ }</span>
                </div>
                <span>Object</span>
            </div>
            
            <div class="tool-item array-tool" @onclick="() => OnPieceClick(PuzzleType.Array)">
                <div class="puzzle-preview array-preview">
                    <span>[ ]</span>
                </div>
                <span>Array</span>
            </div>
        </div>
        
        <div class="tool-category">
            <h6>Values</h6>
            <div class="tool-item string-tool" @onclick="() => OnPieceClick(PuzzleType.String)">
                <div class="puzzle-preview string-preview">
                    <span>"text"</span>
                </div>
                <span>String</span>
            </div>
            
            <div class="tool-item number-tool" @onclick="() => OnPieceClick(PuzzleType.Number)">
                <div class="puzzle-preview number-preview">
                    <span>123</span>
                </div>
                <span>Number</span>
            </div>
            
            <div class="tool-item boolean-tool" @onclick="() => OnPieceClick(PuzzleType.Boolean)">
                <div class="puzzle-preview boolean-preview">
                    <span>true</span>
                </div>
                <span>Boolean</span>
            </div>
            
            <div class="tool-item null-tool" @onclick="() => OnPieceClick(PuzzleType.Null)">
                <div class="puzzle-preview null-preview">
                    <span>null</span>
                </div>
                <span>Null</span>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public EventCallback<PuzzleType> OnPieceSelected { get; set; }

    private async Task OnPieceClick(PuzzleType pieceType)
    {
        await OnPieceSelected.InvokeAsync(pieceType);
    }
}

<style>
.toolbox {
    padding: 15px;
    height: 100%;
}

.toolbox-header {
    margin-bottom: 20px;
}

.toolbox-header h5 {
    margin: 0;
    color: #495057;
    font-weight: 600;
}

.tool-category {
    margin-bottom: 20px;
}

.tool-category h6 {
    color: #6c757d;
    font-size: 0.85rem;
    margin-bottom: 10px;
    text-transform: uppercase;
    font-weight: 600;
}

.tool-item {
    display: flex;
    align-items: center;
    padding: 10px;
    margin-bottom: 8px;
    border: 1px solid #e9ecef;
    border-radius: 8px;
    cursor: pointer;
    transition: all 0.2s ease;
    background-color: white;
}

.tool-item:hover {
    background-color: #f8f9fa;
    border-color: #007bff;
    transform: translateY(-1px);
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.puzzle-preview {
    width: 40px;
    height: 30px;
    display: flex;
    align-items: center;
    justify-content: center;
    margin-right: 10px;
    border-radius: 4px;
    font-family: 'Courier New', monospace;
    font-size: 12px;
    font-weight: bold;
}

.object-preview {
    background-color: #e3f2fd;
    color: #1976d2;
    border: 2px solid #bbdefb;
}

.array-preview {
    background-color: #f3e5f5;
    color: #7b1fa2;
    border: 2px solid #e1bee7;
}

.string-preview {
    background-color: #e8f5e8;
    color: #388e3c;
    border: 2px solid #c8e6c9;
}

.number-preview {
    background-color: #fff3e0;
    color: #f57c00;
    border: 2px solid #ffcc02;
}

.boolean-preview {
    background-color: #fce4ec;
    color: #c2185b;
    border: 2px solid #f8bbd9;
}

.null-preview {
    background-color: #f5f5f5;
    color: #757575;
    border: 2px solid #e0e0e0;
}

.tool-item span {
    font-size: 14px;
    font-weight: 500;
    color: #495057;
}
</style>