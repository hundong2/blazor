@inject IJSRuntime JSRuntime

<div class="json-preview">
    <div class="preview-header">
        <h5>JSON Preview</h5>
        <div class="preview-actions">
            <button class="btn btn-sm btn-outline-primary me-2" @onclick="CopyToClipboard">
                ðŸ“‹ Copy
            </button>
            <button class="btn btn-sm btn-outline-secondary" @onclick="ToggleImportModal">
                ðŸ“¥ Import
            </button>
        </div>
    </div>
    
    <div class="preview-content">
        <pre class="json-display"><code>@JsonContent</code></pre>
    </div>
    
    <!-- Import Modal -->
    @if (showImportModal)
    {
        <div class="modal-overlay" @onclick="CloseImportModal">
            <div class="modal-content" @onclick:stopPropagation="true">
                <div class="modal-header">
                    <h6>Import JSON</h6>
                    <button class="btn-close" @onclick="CloseImportModal"></button>
                </div>
                <div class="modal-body">
                    <textarea class="form-control" 
                              rows="10" 
                              @bind="importJson" 
                              placeholder="Paste your JSON here..."></textarea>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseImportModal">Cancel</button>
                    <button class="btn btn-primary" @onclick="ImportJson">Import</button>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public string JsonContent { get; set; } = "{}";
    [Parameter] public EventCallback<string> OnJsonImport { get; set; }

    private bool showImportModal = false;
    private string importJson = "";

    private async Task CopyToClipboard()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", JsonContent);
            await JSRuntime.InvokeVoidAsync("showToast", "JSON copied to clipboard!");
        }
        catch
        {
            // Fallback for older browsers
            await JSRuntime.InvokeVoidAsync("copyToClipboardFallback", JsonContent);
        }
    }

    private void ToggleImportModal()
    {
        showImportModal = !showImportModal;
        if (showImportModal)
        {
            importJson = JsonContent;
        }
    }

    private void CloseImportModal()
    {
        showImportModal = false;
        importJson = "";
    }

    private async Task ImportJson()
    {
        if (!string.IsNullOrWhiteSpace(importJson))
        {
            await OnJsonImport.InvokeAsync(importJson.Trim());
            CloseImportModal();
        }
    }
}

<style>
.json-preview {
    padding: 15px;
    height: 100%;
    display: flex;
    flex-direction: column;
}

.preview-header {
    display: flex;
    justify-content: between;
    align-items: center;
    margin-bottom: 15px;
}

.preview-header h5 {
    margin: 0;
    color: #495057;
    font-weight: 600;
    flex-grow: 1;
}

.preview-actions {
    display: flex;
    gap: 5px;
}

.preview-content {
    flex: 1;
    overflow: auto;
    border: 1px solid #e9ecef;
    border-radius: 6px;
    background-color: #f8f9fa;
}

.json-display {
    margin: 0;
    padding: 15px;
    font-family: 'Courier New', monospace;
    font-size: 12px;
    line-height: 1.4;
    background-color: transparent;
    border: none;
    color: #495057;
    white-space: pre-wrap;
    word-wrap: break-word;
}

.modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0,0,0,0.5);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 1000;
}

.modal-content {
    background: white;
    border-radius: 8px;
    width: 90%;
    max-width: 500px;
    max-height: 90vh;
    display: flex;
    flex-direction: column;
}

.modal-header {
    padding: 15px;
    border-bottom: 1px solid #e9ecef;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.modal-header h6 {
    margin: 0;
    font-weight: 600;
}

.btn-close {
    background: none;
    border: none;
    font-size: 18px;
    cursor: pointer;
    color: #6c757d;
}

.modal-body {
    padding: 15px;
    flex: 1;
    overflow: auto;
}

.modal-footer {
    padding: 15px;
    border-top: 1px solid #e9ecef;
    display: flex;
    justify-content: flex-end;
    gap: 10px;
}
</style>