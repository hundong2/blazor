<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(App).Assembly">
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                <NotAuthorized>
                    @if (context.User.Identity?.IsAuthenticated != true)
                    {
                        // For Blazor Server, direct interaction with HttpContext for redirection
                        // is not standard. Instead, NavigationManager should be used from a component.
                        // Or, if you want a general redirect for all unauthorized access to authorized pages:
                        // <RedirectToLogin /> (This would be a custom component)
                        // For now, we'll let individual pages handle [Authorize] or specific components.
                        // It's also common to have a _Host.cshtml redirect for unauthenticated users trying to access
                        // any Blazor Server page if the whole app requires auth, but here we are setting up page-by-page auth.
                    }
                </NotAuthorized>
                <Authorizing>
                    <p>Authorizing...</p>
                </Authorizing>
            </AuthorizeRouteView>
            <FocusOnNavigate RouteData="@routeData" Selector="h1" />
        </Found>
        <NotFound>
            <PageTitle>Not found</PageTitle>
            <LayoutView Layout="@typeof(MainLayout)">
                <p role="alert">Sorry, there's nothing at this address.</p>
            </LayoutView>
        </NotFound>
    </Router>
</CascadingAuthenticationState>
